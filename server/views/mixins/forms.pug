- const getEntityName = (entity) => _.camelCase(entity.constructor.name)
- const getInputName = (property) => `data[${property}]`
- const getInputId = (property) => `data_${property}`

mixin formFor(entity = null)
  form&attributes(attributes)
    block

mixin input(entity, propertyName, errors = {})
  - propertyErrors = _.get(errors, propertyName)
  - inputId = getInputId(propertyName)
  - inputName = getInputName(propertyName)
  - entityName = getEntityName(entity)
  .mb-3(class=(errors[propertyName] && 'has-danger'))
    label(
      for= inputId
    )= t(`views.${entityName}.${propertyName}`)
    input.form-control(
      id=inputId
      name=inputName
      class=(!_.isEmpty(propertyErrors) && 'is-invalid')
      value=_.get(entity, propertyName, '')
    )&attributes(attributes)
    if !_.isEmpty(propertyErrors)
      .invalid-feedback= propertyErrors.map(({ message }) => message).join('. ')

mixin textarea(entity, propertyName, errors = {})
  - propertyErrors = _.get(errors, propertyName)
  - inputId = getInputId(propertyName)
  - inputName = getInputName(propertyName)
  - entityName = getEntityName(entity)
  .mb-3(class=(errors[propertyName] && 'has-danger'))
    label(
      for= inputId
    )= t(`views.${entityName}.${propertyName}`)
    textarea.form-control(
      id=inputId
      name=inputName
      class=(!_.isEmpty(propertyErrors) && 'is-invalid')
    )&attributes(attributes)= _.get(entity, propertyName, '')
    if !_.isEmpty(propertyErrors)
      .invalid-feedback= propertyErrors.map(({ message }) => message).join('. ')

mixin select(entity, propertyName, options, errors = {})
  - propertyValue = _.get(entity, propertyName, '')
  - propertyErrors = _.get(errors, propertyName)
  - inputId = getInputId(propertyName)
  - inputName = getInputName(propertyName)
  - entityName = getEntityName(entity)
  .mb-3(class=(errors[propertyName] && 'has-danger'))
    label(
      for= inputId
    )= t(`views.${entityName}.${propertyName}`)
    select.form-control(
      id=inputId
      name=inputName
      class=(!_.isEmpty(propertyErrors) && 'is-invalid')
    )&attributes(attributes)
      each option in options
        option(
          value=option.id
          selected=(option.id === propertyValue && 'selected')
        )= option.optionLabel()
    if !_.isEmpty(propertyErrors)
      .invalid-feedback= propertyErrors.map(({ message }) => message).join('. ')

mixin submit(form = null)
  input(class='btn btn-primary' type='submit')&attributes(attributes)

mixin buttonTo(action, method)
  form(action=action, method="post")
    input(name="_method" type="hidden" value=method)
    input(type='submit')&attributes(attributes)
